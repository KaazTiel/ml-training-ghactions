name: Train and Deploy ML Model

on:
  schedule:
    - cron: '0 0 * * *'  # Executa diariamente √† meia-noite (UTC)
  workflow_dispatch:  # Permite execu√ß√£o manual

jobs:
  train:
    runs-on: ubuntu-latest

    steps:
      - name: Clonar reposit√≥rio
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Instalar depend√™ncias do Node.js
        run: |
          npm install
          npm install @tensorflow/tfjs

      - name: Instalar depend√™ncias do TensorFlow
        run: |
          python -m pip install --upgrade pip
          python -m pip install tensorflow
          python -m pip install tensorflowjs  # Adiciona a instala√ß√£o do tensorflowjs

      - name: Criar ambiente virtual Python
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install tensorflow
          python -m pip install tensorflowjs  # Instala tensorflowjs no ambiente virtual

      - name: Executar treinamento do modelo
        run: npm run train

      - name: Debug ‚Äì Listar arquivos gerados pelo treinamento
        run: |
          echo "üìÇ Estrutura do diret√≥rio training/"
          ls -R training/
          echo "üìÇ Estrutura do diret√≥rio training/model/"
          ls -lah training/model/ || echo "Diret√≥rio training/model n√£o encontrado!"

      - name: Verificar arquivos gerados pelo treinamento
        run: |
          MODEL_JSON=$(find training/model -type f -name "model.json")
          MODEL_WEIGHTS=$(find training/model -type f -name "weights.bin")

          if [ -z "$MODEL_JSON" ] || [ -z "$MODEL_WEIGHTS" ]; then
            echo "‚ùå Arquivos do modelo n√£o encontrados!"
            exit 1
          else
            echo "‚úÖ Modelo encontrado:"
            echo "JSON: $MODEL_JSON"
            echo "Pesos: $MODEL_WEIGHTS"
          fi

      - name: Converter modelo para .tflite
        run: |
          MODEL_H5=$(find training/model -type f -name "model.h5")
      
          if [ -z "$MODEL_H5" ]; then
            echo "‚ùå Nenhum arquivo de modelo .h5 encontrado para convers√£o."
            exit 1
          else
            echo "üìå Iniciando convers√£o do modelo para .tflite..."
            python convert_to_tflite.py --model_h5 "$MODEL_H5"
          fi

      - name: Verificar se o modelo .tflite foi gerado
        run: |
          if [ -f "training/model/model.tflite" ]; then
            echo "‚úÖ Modelo convertido para .tflite com sucesso!"
          else
            echo "‚ùå Erro: modelo .tflite n√£o foi encontrado."
            exit 1
          fi

      - name: Instalar Firebase CLI
        run: npm install -g firebase-tools

      - name: Configurar credenciais do Firebase
        run: |
          echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" > $HOME/firebase-service-account.json
          export GOOGLE_APPLICATION_CREDENTIALS=$HOME/firebase-service-account.json

      - name: Configurar Firebase com o projeto espec√≠fico
        run: firebase use --project ml-training-ghactions --alias default

      - name: Fazer Deploy do Modelo para Firebase ML
        run: firebase ml:models deploy --model-file training/model/model.tflite --project ml-training-ghactions
